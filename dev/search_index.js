var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = BinaryTemplates","category":"page"},{"location":"#BinaryTemplates","page":"Home","title":"BinaryTemplates","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for BinaryTemplates.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [BinaryTemplates]","category":"page"},{"location":"#BinaryTemplates.BinaryTemplate","page":"Home","title":"BinaryTemplates.BinaryTemplate","text":"BinaryTemplate\n\nGeneral binary template with multiple chunks at various file offsets.\n\nFields\n\nexpected_file_size::Int: Expected size of the file\noffsets::Vector{Int}: Byte offsets for each chunk\nchunks::Vector{Vector{UInt8}}: Bytes for each chunk\n\n\n\n\n\n","category":"type"},{"location":"#BinaryTemplates.EmptyTemplate","page":"Home","title":"BinaryTemplates.EmptyTemplate","text":"EmptyTemplate\n\nTemplate containing no chunks.\n\nField\n\nexecpted_file_size::Int = 0: Expected size of the file\n\n\n\n\n\n","category":"type"},{"location":"#BinaryTemplates.HeaderOnlyBinaryTemplate","page":"Home","title":"BinaryTemplates.HeaderOnlyBinaryTemplate","text":"HeaderOnlyBinaryTemplate\n\nAbstractBinaryTemplate that consists of a single chunk at the beginning of the file.\n\nFields\n\nexpected_file_size::Int: Expected size of the file\nheader::Vector{UInt8}: Chunk of bytes to be written to the template header\n\n\n\n\n\n","category":"type"},{"location":"#BinaryTemplates.ZeroTemplate","page":"Home","title":"BinaryTemplates.ZeroTemplate","text":"ZeroTemplate\n\nAbstractBinaryTemplate where all the chunks consist bytes equal to 0x00.\n\nFields\n\nexpected_file_size::Int: Expected size of the file\noffsets::Vector{Int}: Byte offsets for each chunk\nchunks_lengths::Vector{Int}: Length of each chunk\n\n\n\n\n\n","category":"type"},{"location":"#BinaryTemplates.apply_template-Tuple{AbstractString, BinaryTemplates.AbstractBinaryTemplate}","page":"Home","title":"BinaryTemplates.apply_template","text":"apply_template(target_filename, template::AbstractBinaryTemplate; backup_filename, ensure_zero=true, truncate=false)\n\nApply an AbstractBinaryTemplate to target_filename by writing chunks to the appropriate offsets.\n\nThe file will be enlarged to expected_file_size(template).\n\nKeywords\n\nbackup_filename - Name of the file to store the backup template. Default: BinaryTemplates.backup_filename(target_filename).\nensure_zero - Throws an error if the bytes to be overwritten are not 0x00. Default: true\ntruncate - Truncate the file if it is larger than expected. Default: false\n\n\n\n\n\n","category":"method"},{"location":"#BinaryTemplates.backup_filename-Tuple{Any}","page":"Home","title":"BinaryTemplates.backup_filename","text":"backup_filename(filename)\n\nGet the backup file name for filename. This function does not actually backup anything.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryTemplates.backuptemplate-Tuple{AbstractString, BinaryTemplates.AbstractBinaryTemplate}","page":"Home","title":"BinaryTemplates.backuptemplate","text":"backuptemplate(filename::AbstractString, template::AbstractBinaryTemplate)\nbackuptemplate(io::IO, template::AbstractBinaryTemplate)\n\nBackup the chunks that would be overwritten by the template into a new template.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryTemplates.isexpectedfilesize-Tuple{Any, BinaryTemplates.AbstractBinaryTemplate}","page":"Home","title":"BinaryTemplates.isexpectedfilesize","text":"isexpectedfilesize(filename, t::AbstractBinaryTemplate)\n\nCheck to see if a file matches the expected filesize of the template.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryTemplates.load","page":"Home","title":"BinaryTemplates.load","text":"load([BinaryTemplate, ]filename::AbstractString, index=1)\n\nLoad a BinaryTemplate from a file. By default, the first saved BinaryTemplate will be loaded. Subsequent templates may be accessed via by setting a larger index.\n\n\n\n\n\n","category":"function"},{"location":"#BinaryTemplates.save","page":"Home","title":"BinaryTemplates.save","text":"save(template::AbstractBinaryTemplate, filename::AbstractString, mode=\"w\")\n\nSerialize an AbstractBinaryTemplate to a file. It can be reloaded as a BinaryTemplate.\n\n\n\n\n\n","category":"function"}]
}
